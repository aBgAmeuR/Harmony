// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  // Uses connection pooling
  url       = env("POSTGRES_PRISMA_URL")
  // Uses direct connection, ⚠️ make sure to keep this to `POSTGRES_URL_NON_POOLING`
  // or you'll have dangling databases from migrations
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id                String             @id @default(cuid())
  username          String             @unique
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  allTimeTracks     AllTimeTrack[]
  lastYearTracks    LastYearTrack[]
  last6MonthsTracks Last6MonthsTrack[]
}

model AllTimeTrack {
  id                String @id @default(cuid())
  track_name        String
  artist_name       String
  album_name        String
  spotify_track_uri String
  image_url         String
  total_played      Int
  ms_played         Int
  score             Float
  user              User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
}

model LastYearTrack {
  id                String @id @default(cuid())
  track_name        String
  artist_name       String
  album_name        String
  spotify_track_uri String
  image_url         String
  total_played      Int
  ms_played         Int
  score             Float
  user              User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
}

model Last6MonthsTrack {
  id                String @id @default(cuid())
  track_name        String
  artist_name       String
  album_name        String
  spotify_track_uri String
  image_url         String
  total_played      Int
  ms_played         Int
  score             Float
  user              User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
}
