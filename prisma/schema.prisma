generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  package       Package[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.String
  access_token      String?  @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Track {
  id           String        @id @map("_id") @db.ObjectId
  title        String
  href         String?
  albumid      String        @db.ObjectId
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  duration     Int?
  track_number Int?
  playbacks    Playback[]
  album        Album         @relation(fields: [albumid], references: [id])
  artists      ArtistTrack[]
}

model Album {
  id          String        @id @map("_id") @db.ObjectId
  title       String
  coverUri    String?
  href        String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  releaseDate DateTime?     @db.Date
  totalTracks Int?
  tracks      Track[]
  artists     AlbumArtist[]
}

model Artist {
  id        String        @id @map("_id") @db.ObjectId
  name      String
  coverUri  String?
  href      String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  genres    String[]
  albums    AlbumArtist[]
  tracks    ArtistTrack[]
}

model Playback {
  id               String   @id @map("_id") @db.ObjectId
  timestamp        DateTime
  msPlayed         BigInt
  reasonStart      String
  reasonEnd        String
  shuffle          Boolean?
  skipped          Boolean?
  offline          Boolean?
  offlineTimestamp BigInt?
  incognitoMode    Boolean?
  trackid          String   @db.ObjectId
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  packageId        String   @db.ObjectId
  package          Package  @relation(fields: [packageId], references: [id])
  track            Track    @relation(fields: [trackid], references: [id])
}

model Package {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  spotify_id String
  userId     String     @db.ObjectId
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  user       User       @relation(fields: [userId], references: [id])
  playbacks  Playback[]
}

model ArtistTrack {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  artistid String @db.ObjectId
  trackid  String @db.ObjectId
  artist   Artist @relation(fields: [artistid], references: [id], onDelete: Cascade)
  track    Track  @relation(fields: [trackid], references: [id], onDelete: Cascade)

  @@unique([artistid, trackid])
}

model AlbumArtist {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  albumid  String @db.ObjectId
  artistid String @db.ObjectId
  album    Album  @relation(fields: [albumid], references: [id], onDelete: Cascade)
  artist   Artist @relation(fields: [artistid], references: [id], onDelete: Cascade)

  @@unique([albumid, artistid])
}
