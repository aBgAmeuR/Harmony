generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  package       Package[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        BigInt?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Track {
  id           String     @id @db.VarChar(22)
  title        String
  href         String?
  albumid      String
  duration     Int?
  track_number Int?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  playbacks    Playback[]
  album        Album      @relation(fields: [albumid], references: [id])
  artists      Artist[]
}

model Album {
  id          String    @id @db.VarChar(22)
  title       String
  coverUri    String?
  href        String?
  releaseDate DateTime? @db.Date
  totalTracks Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  artists     Artist[]
  tracks      Track[]
}

model Artist {
  id        String   @id @db.VarChar(22)
  name      String
  coverUri  String?
  href      String?
  genres    String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  albums    Album[]
  tracks    Track[]
}

model Playback {
  id               Int      @id @default(autoincrement())
  timestamp        DateTime @db.Time(0)
  msPlayed         Int
  reasonStart      String   @db.VarChar(16)
  reasonEnd        String   @db.VarChar(16)
  shuffle          Boolean?
  skipped          Boolean?
  offline          Boolean?
  offlineTimestamp Int?
  incognitoMode    Boolean?
  trackid          String
  packageId        Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  track            Track    @relation(fields: [trackid], references: [id])
  package          Package  @relation(fields: [packageId], references: [id])
}

model Package {
  id         Int        @id @default(autoincrement())
  spotify_id String
  userId     String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  user       User       @relation(fields: [userId], references: [id])
  playbacks  Playback[]
}
