datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client"
  output   = "../generated"
}

model User {
  id                 String         @id @default(cuid())
  name               String?
  email              String?        @unique
  emailVerified      DateTime?
  image              String?
  hasPackage         Boolean        @default(false)
  timeRangeStats     TimeRangeStats @default(medium_term)
  timeRangeDateStart DateTime       @default(dbgenerated("now() - interval '10 years'"))
  timeRangeDateEnd   DateTime       @default(now())
  accounts           Account[]
  package            Package[]
  tracks             Track[]
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Track {
  id             String   @id @default(cuid())
  timestamp      DateTime
  platform       String
  msPlayed       BigInt
  spotifyId      String   @db.VarChar(22)
  artistIds      String[] @db.VarChar(22)
  albumId        String   @db.VarChar(22)
  albumArtistIds String[] @db.VarChar(22)
  reasonStart    String
  reasonEnd      String
  shuffle        Boolean?
  skipped        Boolean?
  offline        Boolean?
  user           User     @relation(fields: [userId], references: [id])
  userId         String
}

model Package {
  id           String   @id @default(uuid())
  spotify_id   String?
  tempFileLink String?
  uploadStatus String   @default("pending")
  fileName     String   @default("package.zip")
  fileSize     String   @default("0")
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum TimeRangeStats {
  short_term
  medium_term
  long_term
}
